- Class: meta
  Course: Programando en R
  Lesson: Gráficos base
  Author: David Kane, traducido por Miguel Expósito Martín
  Type: Standard
  Organization: Williams College
  Version: 0.1.1

- Class: text
  Output: Una de las grandes fortaleza de R, en comparación a otros lenguajes de programación, es la facilidad con la cual podemos crear gráficos con calidad de publicación. En este tema, aprenderemos sobre los gráficos base en R.

- Class: text
  Output: No cubriremos partes más avanzada de gráficos en R en este tema, como ggplot2 y ggvis.

- Class: text
  Output: Hay una escuela de pensamiento con el enfoque contrario; es decir, se debería enseñar ggplot2 primero. Ver http://varianceexplained.org/r/teach_ggplot2_to_beginners/ como referencia de este punto de vista.

- Class: cmd_question
  Output: Carga el data frame cars, incluido en R por defecto, con data(cars).
  CorrectAnswer: data(cars)
  AnswerTests: omnitest(correctExpr='data(cars)')
  Hint: Escribe data(cars) para cargar los datos.

- Class: text
  Output: Para afianzar conceptos, trabajaremos con data frames sencillos. Nuestro objetivo principal es introducir las distintas funciones gráficas y sus argumentos. La salida parecerá más interesante con conjuntos de datos más grandes y complejos.

- Class: cmd_question
  Output: Abre la página de ayuda para cars.
  CorrectAnswer: ?cars
  AnswerTests: any_of_exprs('?cars', 'help(cars)', 'help("plot")')
  Hint: Escribe ?cars o help(cars) para visualizar una página de ayuda con detalles del data frame cars.

- Class: text
  Output: "Como puedes ver en la página de ayuda, el conjunto de datos cars tiene tan sólo dos variables; velocidad y distancia de parada. Tengamos en cuenta que estos datos son de los años 20."

- Class: cmd_question
  Output: Ejecuta head() en los datos de cars.
  CorrectAnswer: head(cars)
  AnswerTests: omnitest(correctExpr='head(cars)')
  Hint: Escribe head(cars) para ver el principio del data frame cars.

- Class: text
  Output: Antes de dibujar, siempre es buena idea tener una idea de cómo son los datos. Como hemos visto anteriormente, algunos comandos clave para ello son dim(), names(), head(), tail() y summary().

- Class: cmd_question
  Output: Ejecuta el comando the plot() con el data frame cars. 
  CorrectAnswer: plot(cars)
  AnswerTests: omnitest(correctExpr='plot(cars)')
  Hint: Prueba plot(cars) para crear una gráfica del data frame cars.

- Class: text
  Output: Como siempre, R hace lo posible por darnos algo con sentido dada la información que le hemos proporcionado. En primer lugar, R se da cuenta de que el data frame que hemos pasado tiene sólo dos columnas, con lo que asume que queremos representar el valor de una frente a la otra.

- Class: text
  Output: En segundo lugar, dado que no hemos proporcioado etiquetas para ninguno de los ejes, R usa los nombres de las columnas. En tercer lugar, R crea marcas en los ejes con núḿeros redondos y los etiqueta convenientemente. Por último, utiliza el resto de valores por defecto proporcionados por la función plot(). 

- Class: text
  Output: Ahora invertiremos algao de tiempo en explorar plot, pero muchos de los temas cubiertos aquí servirán para la mayor parte de funciones gráficas de R. Observemos que 'plot' es un nombre corto para scatterplot.

- Class: cmd_question
  Output: Mira la página de ayuda para plot(). 
  CorrectAnswer: ?plot
  AnswerTests: any_of_exprs('?plot', 'help(plot)')
  Hint: Escribe ?plot o help(plot) para ver la página de ayuda de plot().

- Class: text
  Output: La página de ayuda para plot() destaca los distintos argumentos que puede aceptar la función. Los dos más importantes son x e y, las variables a representar. Para las siguientes preguntas, vamos a incluir los nombres de argumento en las respuestas. Es decir, no escribas plot(cars$speed, cars$dist), aunque esté bien. En su lugar, usa plot(x = cars$speed, y = cars$dist).

- Class: cmd_question
  Output: Usa el comando plot() para mostrar velocidad en el eje X y distancia en el eje Y del data frame cars. Utiliza la forma del comando plot() en la cual los vectores se pasan explícitamente como argumentos para x e y.
  CorrectAnswer: plot(x = cars$speed, y = cars$dist)
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist)')
  Hint: Escribe plot(x = cars$speed, y = cars$dist) para crear el plot.

- Class: text
  Output: Observa que esto produce una respuesta ligeramente diferente a plot(cars). En este caso, R no está seguro de qué queremos usar como etiquetas en los ejes, así que simplemente utiliza los argumentos que le hemos pasado, incluyendo nombre del data frame y símbolos del dólar.

- Class: text
  Output: Hay otras formas de llamar al comando plot; por ejemplo, utilizando la interfaz de "fórmula", con plot(dist ~ speed, cars). No obstante, esperaremos a avanzar un poco en el tema antes de usar este operador.
  
- Class: cmd_question
  Output: Usa plot() para mostrar distancia en el eje X y velocidad en el eje Y, del data frame cars. Es lo contrario de lo que hemos hecho anteriormente.
  CorrectAnswer: plot(x = cars$dist, y = cars$speed)
  AnswerTests: omnitest(correctExpr='plot(x = cars$dist, y = cars$speed)')
  Hint: Escribe plot(x = cars$dist, y = cars$speed) para crear el gráfico.

- Class: text
  Output: Probablemente tenga más sentido que la velocidad vaya en el eje X, dado que la distancia de parada es una función de la velocidad y no al revés. Por tanto, para el resto de las preguntas en esta parte del tema, asigna siempre los argumentos acorde a esto.

- Class: text
  Output: De hecho, podemos asumir que las respuestas a las siguientes preguntas serán todas de la forma plot(x = cars$speed, y = cars$dist, ...) pero con argumentos varios utilizados en vez de ...

- Class: cmd_question
  Output: Recrea el plot con la etiqueta del eje X fijada a "Speed". 
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = "Speed")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, xlab = "Speed")')
  Hint: Escribe plot(x = cars$speed, y = cars$dist, xlab = "Speed") para crear el plot.

- Class: cmd_question
  Output: Recrea el plot con la etiqueta del eje Y fijada a "Stopping Distance". 
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")')
  Hint: Escribe plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance") para crear el plot.

- Class: cmd_question
  Output: Recrea el plot con "Speed" y "Stopping Distance" como etiquetas de los ejes.
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")')
  Hint: Escribe plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance") para crear el plot.

- Class: text
  Output: La razón por la que plot(cars) funcionó al principio del tema fue que R es lo suficientemente inteligente como para saber que el primer elemento (es decir, la primera columna) en el data set cars debería asignarse al argumento x, y el segundo elemento al argumento y. Para ahorrar tecleando, las siguientes respuestas serán de la forma plot(cars, ...) con diversos argumentos añadidos.

- Class: text
  Output: Para cada pregunta, sólo tendremos un argumento adicional a la vez. Naturalmente, podemos pasar más de un argumento cuando estemos trabajando con un proyecto real.

- Class: cmd_question
  Output: Representa el dataset cars con un título principal fijado a "My Plot". Observa que el argumento para el título principal es "main" y no "title".
  CorrectAnswer: plot(cars, main = "My Plot")
  AnswerTests: omnitest(correctExpr='plot(cars, main = "My Plot")')
  Hint: Escribe plot(cars, main = "My Plot") para crear el plot.

- Class: cmd_question
  Output: Representa el dataset cars con un subtítulo fijado a "My Plot Subtitle".
  CorrectAnswer: plot(cars, sub = "My Plot Subtitle")
  AnswerTests: omnitest(correctExpr='plot(cars, sub = "My Plot Subtitle")')
  Hint: Escribe plot(cars, sub = "My Plot Subtitle") para crear el plot.

- Class: text
  Output: La página de ayuda de plot (?plot) sólo cubre un pequeño número del total de argumentos que se le pueden pasar tanto a plot() como a otras funciones gráficas. Para empezar a explorar las otras muchas opciones, podemos echar un vistazo a ?par. Vamos a ver algunos de los más utilizados. Continuemos utilizando plot(cars, ...) como respuesta base a las siguientes preguntas.

- Class: cmd_question
  Output: Representa el data set cars de manera que los puntos dibujados estén coloreados de rojo. (Usa col = 2 para conseguir este efecto.)
  CorrectAnswer: plot(cars, col = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, col = 2)')
  Hint: Escribe plot(cars, col = 2) para crear el plot.

- Class: cmd_question
  Output: Representa el data set cars limitando el eje X de 10 a 15. (Usa xlim = c(10, 15) para conseguir este efecto.) 
  CorrectAnswer: plot(cars, xlim = c(10, 15))
  AnswerTests: omnitest(correctExpr='plot(cars, xlim = c(10, 15))')
  Hint: Escribe plot(cars, xlim = c(10, 15)) para crear el plot.

- Class: text
  Output: También puedes cambiar la forma de los símbolos en el gráfico. La página de ayuda para points (?points) nos da los detalles.

- Class: cmd_question
  Output: Representa el data set cars usando triángulos.  (Usa pch = 2 para conseguir este efecto.) 
  CorrectAnswer: plot(cars, pch = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, pch = 2)')
  Hint: Escribe plot(cars, pch = 2) para crear el plot.

- Class: text
  Output: Los argumentos como "col" y "pch" pueden no parecer muy intuitivos; y eso es porque no lo son! Por eso, mucha gente usa paquetes más modernos como ggplot2 para crear sus gráficos en R.

- Class: text
  Output: Sin embargo, es útil tener una introducción a los gráficos base porque muchas de las expresiones comunes en lattice y ggplot2 vienen de ellos.

- Class: text
  Output: Vamos a echar un vistazo ahora a otras funciones en los gráficos base que podrían sernos útiles, comenzando por los diagramas de caja.

- Class: cmd_question
  Output: Carga el data frame mtcars. 
  CorrectAnswer: data(mtcars)
  AnswerTests: omnitest(correctExpr='data(mtcars)')
  Hint: Escribe data(mtcars) para cargar los datos.

- Class: text
  Output: Siempre que carguemos un nuevo data set, deberíamos explorarlo antes de usarlo. Si estamos en medio de un tema con swirl(), podemos hacerlo escribiendo play(). Esto suspende el tema temporalmente (sin perder el trabajo que hemos hecho hasta ahora) y nos permite ejecutar comandos como dim(mtcars) y head(mtcars). Una vez que hayamos terminado con el examen de los datos, podemos escribir nxt() y el tema se reanudará donde lo dejamos.

- Class: cmd_question
  Output: Mira la página de ayuda para boxplot(). 
  CorrectAnswer: ?boxplot
  AnswerTests: any_of_exprs('?boxplot', 'help(boxplot)')
  Hint: Escribe ?boxplot o help(boxplot) para ver una página con detalles sobre boxplot().

- Class: text
  Output: En vez de añadir columnas de datos directamente como argumentos de entrada, como hicimos con plot(), a veces es más útil pasar el data frame entero. Esto es lo que permite hacer el parámetro "data" en boxplot().

- Class: text
  Output: boxplot(), como muchas funciones en R, también acepta un argumento "fórmula", generalmente una expresión con el operador ("~"), la cual indica la relación entre las variables de entrada. Esto nos permite introducir algo como mpg ~ cyl para representar la relación entre cyl (cilindrada) en el eje X y mpg (consumo en millas por galón) en el eje Y.

- Class: cmd_question
  Output: Usa boxplot() con formula = mpg ~ cyl y data = mtcars para crear un diagrama de caja.
  CorrectAnswer: boxplot(formula = mpg ~ cyl, data = mtcars)
  AnswerTests: omnitest(correctExpr='boxplot(formula = mpg ~ cyl, data = mtcars)')
  Hint: Escribe boxplot(formula = mpg ~ cyl, data = mtcars) para crear el plot.

- Class: text
  Output: El plot muestra que mpg es mucho más bajo para coches con más cilindros. Observemos que podemos usar el mismo conjunto de argumentos que usamos con plot() anteriormente para añadir etiquetas de ejes, títulos, etc.

- Class: text
  Output: Si estamos observando una única variable, los histogramas suelen ser una herramienta muy útil. hist() es la función de R asociada. Como plot(), hist() funciona mejor si se le pasa un único vector. 

- Class: cmd_question
  Output: Usa hist() con el vector mtcars$mpg para crear un histograma.
  CorrectAnswer: hist(mtcars$mpg)
  AnswerTests: any_of_exprs('hist(mtcars$mpg)', 'hist(x = mtcars$mpg)')
  Hint: Escribe hist(mtcars$mpg) to create the plot.

# Not sure what a good lesson length is for this. 
# Might add some information on saving plots.
# Other functions that I use include identify().

- Class: text
  Output: En este tema, hemos aprendido a trabajar con gráficos base en R. El mejor camino para seguir a partir de aquí es estudiar el paquete ggplot2. Si prefieres explorar otros elementos de los gráficos base, esta web (http://www.ling.upenn.edu/~joseff/rstudy/week4.html) proporciona una perspectiva muy útil.

- Class: mult_question
  Output: "¿Te gustaría recibir créditos por completar este curso en Coursera.org?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: coursera_on_demand()
  Hint: ""
