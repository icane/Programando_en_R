- Class: meta
  Course: Programando en R
  Lesson: Subsetting Vectors
  Author: Nick Carchedi, traducido por Miguel Expósito Martín
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: En este tema aprenderemos a extraer elementos de un vector en base a ciertas condiciones especificadas.

- Class: text
  Output: Por ejemplo, podríamos estar interesados tan sólo en los 20 primeros elementos de un vector, o sólo en los elementos que no son NA, o sólo en aquellos que son positivos o corresponden a una variable de interés específica. Al final de este tema, sabremso cómo manejar todos estos escenarios.

- Class: cmd_question
  Output: He creado un vector por ti llamado x que contiene una ordenación aleatoria de 20 números (a través de una distribución normal estándar) y 20 NAs. Escribe x para ver qué pinta tiene.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Escribe x para ver su contenido.

- Class: text
  Output: La forma de decirle a R que queremos seleccionar algunos elementos en particular (es decir, un subconjunto o 'subset') es poniendo un vector de índices entre corchetes inmediatamente después del nombre del vector.

- Class: cmd_question
  Output: Para un ejemplo sencillo, prueba con x[1:10] para ver los 10 primeros elementos de x.
  CorrectAnswer: x[1:10]
  AnswerTests: omnitest(correctExpr='x[1:10]')
  Hint: Visualiza los 10 primeros elementos de x con x[1:10].

- Class: text
  Output: Los vectores de índices pueden ser de cuatro tipos -- lógicos, de enteros positivos, de enteros negativos y de caracteres-- cada uno de los cuales será cubierto en este tema.

- Class: text
  Output: Comencemos indexando con vectores lógicos. Un escenario común en el mundo real es querer extraer todos los elementos de un vector que no son NA (es decir, datos faltantes). Recordemos que is.na(x) devuelve un vector de valores lógicos de la misma longitud de x, con TRUEs correspondiendo a valores NA en x y FALSEs correspondiendo a valores no-NA en x.

- Class: mult_question
  Output: ¿Qué crees que devolverá x[is.na(x)]?
  AnswerChoices: Un vector con todo NAs; Un vector sin NAs; Un vector de TRUEs and FALSEs; Un vector de longitud 0
  CorrectAnswer: Un vector con todo NAs
  AnswerTests: omnitest(correctVal="Un vector con todo NAs")
  Hint: Recordemos que is.na(x) nos dice dónde están los NAs en un vector. Así que si hacemos subset de x basado en esta condición, ¿qué esperas que pueda pasar?

- Class: cmd_question
  Output: Compruébalo tu mismo escribiendo x[is.na(x)].
  CorrectAnswer: x[is.na(x)]
  AnswerTests: omnitest(correctExpr='x[is.na(x)]')
  Hint: Escribe x[is.na(x)] para comprobar que obtenemos todo NAs, que evidentemente no es lo que queremos.

- Class: cmd_question
  Output: Recordemos que `!` nos da la negación lógica de una expresión, con lo que !is.na(x) puede leerse como 'no es NA'. Por tanto, si queremos crear un vector y que contenga todos los valores no NA del vector x, podemos usar y <- x[!is.na(x)]. Pruébalo.
  CorrectAnswer: y <- x[!is.na(x)]
  AnswerTests: omnitest(correctExpr='y <- x[!is.na(x)]')
  Hint: Escribe y <- x[!is.na(x)] para capturar todos los valores no vacíos de x.

- Class: cmd_question
  Output: Muestra y por la consola.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Escribe y para visualizar su contenido.

- Class: text
  Output: Ahora que hemos aislado los valores no vacíos de x y los hemos puesto en y, podemos hacer subsetting de y como mejor nos plazca.

- Class: mult_question
  Output: Recuerda que la expresión y > 0 nos dará un vector de valores lógicos de la misma longitud que y, con TRUEs correspondiendo a los valores de y que son mayores que 0 y FALSEs correspondiendo a los valores de y que son menores o iguales que 0. ¿Qué crees que devolverá y[y > 0]?
  AnswerChoices: Un vector con todos los elementos positivos de y; Un vector con todos los elementos negativos de y; Un vector con todo NAs; Un vector de longitud 0; Un vector de TRUEs y FALSEs
  CorrectAnswer: Un vector con todos los elementos positivos de y
  AnswerTests: omnitest(correctVal="Un vector con todos los elementos positivos de y")
  Hint: La expresión lógica y > 0 nos devolverá TRUE para cada elemento de y que sea positivo. Basándonos en eso, ¿Qué crees que devolverá y[y > 0]?

- Class: cmd_question
  Output: Escribe y[y > 0] para ver que obtenemos todos los elementos positivos de y, que también son los elementos positivos de nuestro vector original x.
  CorrectAnswer: y[y > 0]
  AnswerTests: omnitest(correctExpr='y[y > 0]')
  Hint: Escribe y[y > 0] para visualizar sólo los elementos positivos de y.

- Class: cmd_question
  Output: Te puedes estar preguntando por qué no hemos empezado directamente con x[x > 0] para aislar los elementos positivos de x. Probémoslo ahora para ver por qué.
  CorrectAnswer: x[x > 0]
  AnswerTests: omnitest(correctExpr='x[x > 0]')
  Hint: Prueba x[x > 0] para ver por qué no hemos utilizado este enfoque.

- Class: text
  Output: Dado que NA no es un valor, sino un marcador para una cantidad desconocida, la expresión NA > 0 se evalúa a NA. Por tanto, tendremos un montón de NAs mezclados con nuestros números positivos si hacemos esto.

- Class: cmd_question
  Output: Combinando nuestro conocimiento de operadores lógicos con nuestro nuevo conocimiento de subsetting, podríamos hacer esto; x[!is.na(x) & x > 0]. Probémoslo.
  CorrectAnswer: x[!is.na(x) & x > 0]
  AnswerTests: omnitest(correctExpr='x[!is.na(x) & x > 0]')
  Hint: Prueba x[!is.na(x) & x > 0] para ver lo que obtienes.

- Class: text
  Output: En este caso, pedimos sólo valores de x que no estén vacíos Y sean mayores que cero.

- Class: text
  Output: Ya hemos visto cómo extraer sólo los primeros diez valores de x usando x[1:10]. En este caso, estamos proporcionando un vector de enteros positivos dentro de los corchetes que le dice a R que devuelva sólo los elementos de x numerados del 1 al 10.

- Class: text
  Output: Muchos lenguajes de programación utilizan lo que se llama 'indexado basado en el cero', que significa que el primer elemento de un vector se considera el elemento 0. R utiliza 'indexado basado en el 1', lo que significa (¡lo adivinaste!) que el primer elemento de un vector se considera el elemento 1.

- Class: cmd_question
  Output: ¿Puedes imaginarte cómo extraeríamos el tercer, quinto y séptimo elemento de x? Pista -- usa la función c() para especificar los números de elemento como un vector numérico.
  CorrectAnswer: x[c(3, 5, 7)]
  AnswerTests: omnitest(correctExpr='x[c(3, 5, 7)]')
  Hint: Crea un vector de íncides con c(3, 5, 7), y luego ponlo dentro de los corchetes.

- Class: cmd_question
  Output: Es importante que cuando usemos vectores de enteros para hacer subsetting de nuestro vector x, nos mantengamos dentro del conjunto de índices {1, 2, ..., 40}, dado que x solo tiene 40 elementos. ¿Qué pasa si pedimos el elemento 0 de x? Es decir, x[0]. Probémoslo.
  CorrectAnswer: x[0]
  AnswerTests: omnitest(correctExpr='x[0]')
  Hint: Prueba x[0] par ver qué pasa cuando nos referimos al elemento 0 de un vector, el cual no se encuentra definido en R.

- Class: cmd_question
  Output: Como podríamos esperar, no obtenemos nada útil. Desafortunadamente, R no nos previene de hacer esto. ¿Qué pasa si pedimos el elemento 3000 de x? Probemos...
  CorrectAnswer: x[3000]
  AnswerTests: omnitest(correctExpr='x[3000]')
  Hint: Pidamos el elemento 3000 de x (el cual no existe) con x[3000].

- Class: text
  Output: De nuevo, nada útil, pero R no nos previene de hacerlo. Tomémosno esto como un aviso; siempre teberíamos estar seguros que lo que pedimos se encuentra dentro del rango de índices del vector con el que estamos trabajando.

- Class: text
  Output: ¿Qué pasa si estamos interesados en todos los elementos de x EXCEPTO el segundo y el décimo? Sería un poco tedioso construir un vector conteniendo todos los números del 1 al 40 EXCEPTO el 2 y el 10.

- Class: cmd_question
  Output: Por suerte, R acepta índices de enteros negativos. Si x[c(2, 10)] nos devuelve SÓLO el segundo y el décimo elemento de x, x[c(-2, -10)] nos devuelve todos los elementos de x EXCEPTO el segundo y el décimo. Prueba x[c(-2, -10)] para ver esto.
  CorrectAnswer: x[c(-2, -10)]
  AnswerTests: omnitest(correctExpr='x[c(-2, -10)]')
  Hint: Prueba con x[c(-2, -10)].

- Class: cmd_question
  Output: Un atajo par especificar múltiples números negativos es poner el signo - fuera, antes del vector de números positivos. Escribe x[-c(2, 10)] para obtener el mismo resultado.
  CorrectAnswer: x[-c(2, 10)]
  AnswerTests: omnitest(correctExpr='x[-c(2, 10)]')
  Hint: Usa x[-c(2, 10)] par simplificar las cosas un poco. Esto podría ahorrarnos mucho tiempo si tenemos que especificar muchos índices negativos.

- Class: text
  Output: Hasta ahora, hemos cubierto tres tipos de vectores índices -- lógicos, enteros positivos y enteros negativos. El único tipo faltante requiere que introduzcamos el concepto de nomenclatura de elementos.

- Class: cmd_question
  Output: Crea un vector numérico con tres elementos etiquetados o nombrados usando vect <- c(foo = 11, bar = 2, norf = NA).
  CorrectAnswer: vect <- c(foo = 11, bar = 2, norf = NA)
  AnswerTests: omnitest(correctExpr='vect <- c(foo = 11, bar = 2, norf = NA)')
  Hint: Crea un vector nombrado con vect <- c(foo = 11, bar = 2, norf = NA).

- Class: cmd_question
  Output: Cuando saquemos vect por la consola, veremos que cada elemento tiene un nombre. Probémoslo.
  CorrectAnswer: vect
  AnswerTests: omnitest(correctExpr='vect')
  Hint: Escribe vect para visualizar su contenido.

- Class: cmd_question
  Output: También podemos obtener los nombres de vect pasando vect como argumento a la función names(). Probémoslo.
  CorrectAnswer: names(vect)
  AnswerTests: omnitest(correctExpr='names(vect)')
  Hint: Comprueba el resultado de names(vect).

- Class: cmd_question
  Output: Alternativamente, podemos crear un vector sin nombrar vect2 con c(11, 2, NA). Hagámoslo ahora.
  CorrectAnswer: vect2 <- c(11, 2, NA)
  AnswerTests: omnitest(correctExpr='vect2 <- c(11, 2, NA)')
  Hint: Crea un vector ordinario (sin nombrar) llamado vect2 que contenga c(11, 2, NA).

- Class: cmd_question
  Output: Entonces, podemos añadir el atributo `names` a vect2 después con el comando names(vect2) <- c("foo", "bar", "norf"). Adelante.
  CorrectAnswer: names(vect2) <- c("foo", "bar", "norf")
  AnswerTests: omnitest(correctExpr='names(vect2) <- c("foo", "bar", "norf")')
  Hint: Añade nombres a vect2 con names(vect2) <- c("foo", "bar", "norf").

- Class: cmd_question
  Output: Ahora, comprobemos que vect y vect2 son iguales pasándolos como argumentos a la función identical().
  CorrectAnswer: identical(vect, vect2)
  AnswerTests: any_of_exprs('identical(vect, vect2)', 'identical(vect2, vect)')
  Hint: La función identical() nos dice si sus dos primeros argumentos son, en fin, idénticos.

- Class: text
  Output: Sin duda, vect y vect2 son vectores nombrados idénticos.

- Class: mult_question
  Output: Ahora, volvamos a la cuestión de hacer subsetting en un vector con elementos nombrados. ¿Cuál de los siguientes comandos crees que nos dará el segundo elemento de vect?
  AnswerChoices: vect["bar"]; vect[bar]; vect["2"]
  CorrectAnswer: vect["bar"]
  AnswerTests: omnitest(correctVal='vect["bar"]')
  Hint: Si queremos el elemento nombrado "bar" (es decir, el segundo elemento de vect), ¿qué comando nos lo dará?

- Class: cmd_question
  Output: Ahora, probémoslo.
  CorrectAnswer: vect["bar"]
  AnswerTests: omnitest(correctExpr='vect["bar"]')
  Hint: Prueba vect["bar"].

- Class: cmd_question
  Output: De forma similar, podemos especificar un vector de nombres con vect[c("foo", "bar")]. Probémoslo.
  CorrectAnswer: vect[c("foo", "bar")]
  AnswerTests: omnitest(correctExpr='vect[c("foo", "bar")]')
  Hint: Usa vect[c("foo", "bar")] para obtener sólo los elementos de un vector llamados "foo" y "bar".

- Class: text
  Output: Ahora ya conocemos los cuatro métodos para extraer datos de vectores. Los distintos enfoques son mejores en distintos escenarios, pero ante la duda, ¡pruébalos!

- Class: mult_question
  Output: "Te gustaría recibir créditos por completar este curso en Coursera.org?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: coursera_on_demand()
  Hint: ""
