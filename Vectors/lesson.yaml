- Class: meta
  Course: Programando en R
  Lesson: Vectores
  Author: Nick Carchedi, traducido por Miguel Expósito Martín
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: La estructura de datos más común y sencilla en R es el vector.

- Class: text
  Output: 'Existen dos tipos de vectores: vectores atómicos y listas. Un vector atómico contiene tan sólo un tipo de datos, mientras que una lista puede contener múltiples tipos de datos. Vamos a explorar en mayor profundidad los vectores atómicos antes de meternos con las listas.'

- Class: text
  Output: En temas anteriores hemos tratado con vectores numéricos, un tipo de vector atómico. Entre otros tipos de vectores atómicos podemos encontrar los lógicos, de caracteres, enteros y complejos. En este tema, veremos más de cerca los vectores lógicos y de caracteres.

- Class: text
  Output: Los vectores lógicos pueden contener los valores TRUE, FALSE, and NA ('not available').
    Estos valores se generan como resultado de 'condiciones' lógicas. Vamos a experimentar con algunas condiciones sencillas with some simple conditions.

- Class: cmd_question
  Output: En primer lugar, creemos un vector numérico num_vect que contenga los valores 0.5, 55,
    -10, y 6.
  CorrectAnswer: num_vect <- c(0.5, 55, -10, 6)
  AnswerTests: omnitest(correctExpr='num_vect <- c(0.5, 55, -10, 6)')
  Hint: Recuerda que la función c() se utiliza para crear un vector. Si has olvidado cómo utilizarla, puedes usar ?c para acceder al archivo de ayuda. No olvides asignar el resultado a una nueva variable llamada num_vect.

- Class: cmd_question
  Output: Ahora, crea una variable llamada tf que almacene el resultado de num_vect < 1 (leído como num_vect es menor que 1).
  CorrectAnswer: tf <- num_vect < 1
  AnswerTests: omnitest(correctExpr='tf <- num_vect < 1')
  Hint: Usa tf <- num_vect < 1 para asignar el resultado de num_vect < 1 a una variable llamada tf.

- Class: mult_question
  Output: Qué pinta crees que tendrá?
  CorrectAnswer: un vector de 4 valores lógicos
  AnswerChoices: un vector de 4 valores lógicos; un único valor lógico
  AnswerTests: omnitest(correctVal='a vector of 4 logical values')
  Hint: ¿Recuerdas nuestro tema de aritmética de vectores? R lleva a cabo muchas operaciones elemento a elemento. A estas operaciones las llamamos 'vectorizadas'.

- Class: cmd_question
  Output: Ahora, muestra por pantalla el contenido de tf.
  CorrectAnswer: tf
  AnswerTests: omnitest(correctExpr='tf')
  Hint: Simplemente escribe tf y pulsa Enter para ver su valor.

- Class: text
  Output: La declaración num_vect < 1 es una condición, y tf nos dice si cada elemento correspondiente de nuestro vector numérico num_vect satisface dicha condición.

- Class: text
  Output: El primer elemento de num_vect es 0.5 (que es menor que 1) y por lo tanto la declaración 0.5 < 1 es TRUE. El segundo elemento de num_vect es 55, que es mayor que uno, por lo que la declaración 55 < 1 es FALSE. La misma lógica aplica para el tercer y cuarto elemento.

- Class: cmd_question
  Output: Probemos con otro. Escribe num_vect >= 6 sin asignar el resultado a una nueva variable.
  CorrectAnswer: num_vect >= 6
  AnswerTests: omnitest(correctExpr='num_vect >= 6')
  Hint: No crees una nueva variable en este caso. Tan sólo queremos ver el resultado de num_vect >= 6. Asegúrate de que no hay espacios entre los símbolos `>` y `=`. Piensa sobre ellos como un único símbolo representando 'mayor o igual que'.

- Class: text
  Output: Esta vez estamos preguntando si cada elemento individual de num_vect es mayor o igual a 6. Dado que tan sólo 55 y 6 son mayores o iguales a 6, el segundo y cuarto elemento del resultado son TRUE y el primero y el tercero FALSE.

- Class: text
  Output: Los siḿbolos `<` y `>=` en estos ejemplos se llaman 'operadores lógicos'. Otros operadores lógicos son `>`, `<=`, `==` para igualdad exacta y `!=` para desigualdad.

- Class: text
  Output: Si tenemos dos expresiones lógicas, A y B, podemos preguntar si al menos una de ellas es TRUE usando A | B ('or' lógico o 'unión') o si son ambas TRUE con A & B ('and' lógico o 'intersección'). Por último, !A es la negación de A y es TRUE cuando A es FALSE y viceversa.

- Class: text
  Output: Es una buena idea invertir algo de tiempo jugando con varias combinaciones de estos operadores lógicos hasta que nos sintamos cómodos con su uso. Vamos a hacer unos ejemplos para entrar en calor.

- Class: text
  Output: Intenta predecir lo mejor que puedas el resultado de cada una de las siguientes declaraciones. Puedes usar lápiz y papel para trabajar sobre ellas si te es útil. Si te atascas, inténtalo al azar... tienes un 50% de probabilidades de acertar!

- Class: mult_question
  Output: (3 > 5) & (4 == 4)
  CorrectAnswer: 'FALSE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='FALSE')
  Hint: Divide este problema en 2 partes. El `&` en medio implica que AMBAS partes son TRUE. Tu trabajo es adivinar si esa afirmación es cierta. De ser así, la condición entera es TRUE. Si no, es FALSE.

- Class: mult_question
  Output: (TRUE == TRUE) | (TRUE == FALSE)
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: Divide este problema en 2 partes. El `|` en medio indica que AL MENOS UNA de las partes es TRUE. Tu trabajo es adivinar si esa afirmación es cierta. Si lo es, la condición entera es TRUE. Si no, es FALSE.

- Class: mult_question
  Output: ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: Esta es un poco difícil. Recuerda que el símbolo `!` niega lo que quiera que venga detrás. También hay un 'orden de operaciones' a tener en cuenta aquí. Las condiciones entre paréntesis deberían evaluarse primero. Después, hay que trabajar hacia afuera.

- Class: text
  Output: No te preocupes si te resulta difícil. Están pensadas para eso. Trabajar con declaraciones lógicas en R lleva su práctica, pero tus esfuerzos serán recompensados en temas futuros (ej. subsetting y estructuras de control).

- Class: text
  Output: Los vectores de caracteres también son muy comunes en R. Las dobles comillas se utilizan para distinguir los objetos de tipo carácter, como en el siguiente ejemplo.

- Class: cmd_question
  Output: 'Crea un vector de caracteres que contenga las siguientes palabras: "Mi", "nombre",
    "es". Acuérdate de encerrar cada palabra en sus correspondientes comillas dobles para que R sepa que son cadenas de caracteres. Almacena el vector en una variable llamada my_char.'
  CorrectAnswer: my_char <- c("Mi", "nombre", "es")
  AnswerTests: omnitest(correctExpr='my_char <- c("Mi", "nombre", "es")')
  Hint: Escribe my_char <- c("Mi", "nombre", "es") para crear una nueva variable llamada my_char que contenga un vector de caracteres de longitud 3. Asegúrate de que las comas que separan las palabras están FUERA de las dobles comillas, ya que de otro modo R creerá que las comas son parte de las palabras.

- Class: cmd_question
  Output: Muestra el contenido de my_char para ver qué pinta tiene.
  CorrectAnswer: my_char
  AnswerTests: omnitest(correctExpr='my_char')
  Hint: Escribe my_char para ver su contenido.

- Class: text
  Output: Ahora mismo, my_char es un vector de caracteres de longitud 3. Digamos que queremos combinar los elementos de my_char en una única cadena de caracteres (es decir, un vector de caracteres de longitud 1). Podemos hacer esto con la función paste().

- Class: cmd_question
  Output: Escribe paste(my_char, collapse = " "). Asegúrate de que hay un espacio entre las dobles comillas en el argumento `collapse`. Enseguida veremos por qué.
  CorrectAnswer: paste(my_char, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(my_char, collapse = " ")')
  Hint: Utiliza paste(my_char, collapse = " ") para combinar las palabras en el vector de manera que prácticamente formen una frase. Debería haber un único espacio entre las dobles comillas en el argumento `collapse` para que las palabras estén separadas por un espacio.

- Class: text
  Output: El argumento `collapse` de la función paste() le dice a R que, cuando combine los elementos del vector de caracteres my_char, nos gustaría separarlos con espacios.

- Class: text
  Output: Parece que nos estamos olvidando de algo... ¡Ah, sí! ¡Tu nombre!

- Class: cmd_question
  Output: 'Para añadir (o ''concatenar'') tu nombre al final de my_char, utiliza la función c() así: c(my_char, "aquí_tu_nombre"). Pon tu nombre entre comillas dobles donde pone "aquí_tu_nombre". Pruébalo ahora y almacena el resultado en una nueva variable llamada my_name.'
  CorrectAnswer: my_name <- c(my_char, "Swirl")
  AnswerTests: var_is_a("character", "my_name"); expr_uses_func("c"); expr_creates_var("my_name");
    val_has_length(4)
  Hint: Pon tu nombre al final del vector my_char con la función c(). Asegúrate de asignar el resultado a una nueva variable llamada my_name. Si tu nombre fuera "Swirl", tendrías que escribir my_name <- c(my_char, "Swirl").

- Class: cmd_question
  Output: Echa un vistazo al contenido de my_name.
  CorrectAnswer: my_name
  AnswerTests: omnitest(correctExpr='my_name')
  Hint: Escribe my_name y pulsa Enter para ver su contenido.

- Class: cmd_question
  Output: Ahora, usa la función paste() una vez más para combinar las palabras de my_name en una única cadena de caracteres. ¡No te olvides de indicar collapse = " " !
  CorrectAnswer: paste(my_name, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(my_name, collapse = " ")')
  Hint: Utiliza paste(my_name, collapse = " ") para combinar las cuatro palabras juntas, separadas por espacios.

- Class: text
  Output: En este ejemplo, hemos utilizado la función paste() para combinar los elementos de un único vector de caracteres. paste() también se puede utilizar para combinar los elementos de múltiples vectores de caracteres. 

- Class: cmd_question
  Output: En el caso más sencillo, podemos combinar dos vectores de caracteres siendo ambos de longitud 1 (es decir, combinar dos palabras). Prueba con paste("Hola", "mundo!", sep = " "), donde el argumento `sep` le dice a R que queremos separar los elementos a combinar con un único espacio.
  CorrectAnswer: paste("Hola", "mundo!", sep = " ")
  AnswerTests: omnitest(correctExpr='paste("Hola", "mundo!", sep = " ")')
  Hint: Escribe paste("Hola", "mundo!", sep = " ") para combinar las dos palabras separadas por un único espacio. Debería haber un único espacio entre las dobles comillas en el argumento `sep` de la función paste().

- Class: cmd_question
  Output: Para un ejemplo ligeramente más complicado, podemos combinar dos vectores, cada uno de longitud 3. Usa paste() para combinar el vector de enteros 1:3 con el vector de caracteres c("X", "Y", "Z"). Esta vez, utiliza sep = "" para no dejar espacios entre los elementos combinados.
  CorrectAnswer: paste(1:3, c("X", "Y", "Z"), sep = "")
  AnswerTests: any_of_exprs('paste(1:3, c("X", "Y", "Z"), sep = "")', 'paste(c(1:3), c("X", "Y", "Z"), sep = "")')
  Hint: Escribe paste(1:3, c("X", "Y", "Z"), sep = "") para ver qué pasa si combinamos dos vectores de la misma longitud utilizando paste().

- Class: text
  Output: '¿Qué crees que pasará si los vectores son de distinta longitud? (Pista:
    ya hemos hablado sobre esto en un tema anterior.)'

- Class: cmd_question
  Output: Reciclado de vectores! Prueba paste(LETTERS, 1:4, sep = "-"), donde LETTERS es una variable predefinida en R que contiene un vector de caracteres de las 26 letras en el abecedario inglés.
  CorrectAnswer: paste(LETTERS, 1:4, sep = "-")
  AnswerTests: omnitest(correctExpr='paste(LETTERS, 1:4, sep = "-")')
  Hint: Escribe paste(LETTERS, 1:4, sep = "-") para ver cómo R recicla el vector 1:4 para ajustar a la longitud de LETTERS. Observa que estamos usando `-` como separador esta vez, y no un espacio.

- Class: text
  Output: Dado que el vector de caracteres LETTERS es más largo que el vector numérico 1:4, R sencillamente recicla o repite 1:4 hasta que su longitud coincida con la de LETTERS.

- Class: text
  Output: También merece la pena señalar que el vector numérico 1:4 es "convertido" a un vector de caracteres por la función paste().

- Class: text
  Output: Discutiremos la coerción o conversión en otro tema, pero viene a significar que los números 1, 2, 3 y 4 en la salida anterior ya no son números al uso para R, sino los caracteres "1", "2", "3" y "4".

- Class: mult_question
  Output: "Te gustaría recibir créditos por completar este curso en Coursera.org?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: coursera_on_demand()
  Hint: ""
