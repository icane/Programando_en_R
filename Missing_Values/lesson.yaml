- Class: meta
  Course: Programando en R
  Lesson: Valores no disponibles
  Author: Nick Carchedi, traducido por Miguel Expósito Martín
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: Los valores no disponibles juegan un papel importante en estadística y en los análisis de datos. A menudo estos valores no deberían ser ignorados, sino cuidadosamente estudiados para ver si hay un patrón subyacente o alguna causa de su ausencia.

- Class: text
  Output: En R, se usa NA para representar cualquier valor que no está disponible o 'falta', en un sentido estadístico. En este tema, exploraremos un poco más de cerca los valores faltantes.

- Class: cmd_question
  Output: Cualquier operación sobre valores NA nromalmente devuelve NA como resultado. Para ilustrar esto, vamos a crear el vector c(44, NA, 5, NA) y a asignárselo a la variable x.
  CorrectAnswer: x <- c(44, NA, 5, NA)
  AnswerTests: omnitest(correctExpr='x <- c(44, NA, 5, NA)')
  Hint: Assigna el vector c(44, NA, 5, NA) a una variable x. El NA debe estar en mayúsculas.

- Class: cmd_question
  Output: Ahora, multipliquemos x por 3.
  CorrectAnswer: x * 3
  AnswerTests: any_of_exprs('x * 3', '3 * x')
  Hint: Prueba x * 3.

- Class: text
  Output: Observa que los elementos del vector resultante que se corresponden con valores NA en x también son NA.

- Class: cmd_question
  Output: Para hacer las cosas un poco más interesantes, vamos a crear un vector que contenga 1000 valores de una distribución normal estándar con el comando y <- rnorm(1000).
  CorrectAnswer: y <- rnorm(1000)
  AnswerTests: omnitest(correctExpr='y <- rnorm(1000)')
  Hint: La función rnorm() genera números aleatorios partiendo de una distribución normal. Escribe y <- rnorm(1000).

- Class: cmd_question
  Output: A continuación, vamos a crear un vector que contenga 1000 NAs con la función rep() y lo vamos a almacenar en la variable z.
  CorrectAnswer: z <- rep(NA, 1000)
  AnswerTests: omnitest(correctExpr='z <- rep(NA, 1000)')
  Hint: Escribe z <- rep(NA, 1000) par agenerar un vector de 1000 NAs.

- Class: cmd_question
  Output: Finalmente, vamos a seleccionar 100 elementos al azar de entre estos 2000 valores (combinando y y z) de tal forma que no sepamos cuantos NAs vamos a encontrar ni qué posiciones ocuparán en el vector final. -- my_data <- sample(c(y, z), 100).
  CorrectAnswer: my_data <- sample(c(y, z), 100)
  AnswerTests: omnitest(correctExpr='my_data <- sample(c(y, z), 100)')
  Hint: La función sample() extrae una muestra aleatoria de los datos proporcinoados en su primer argumento (en este caso c(y, z)) del tamaño especificado por el segundo argumento (100). El comando my_data <- sample(c(y, z), 100) hará justamente lo que queremos.

- Class: cmd_question
  Output: Vamos a preguntarnos primero dónde están los NAs en nuestros datos. La función is.na() nos dice si cada elemento de un vector es NA. Vamos a llamar a is.na() en el vector my_data y a asignar el resultado en my_na.
  CorrectAnswer: my_na <- is.na(my_data)
  AnswerTests: omnitest(correctExpr='my_na <- is.na(my_data)')
  Hint: Asigna el resultado de is.na(my_data) a la variable my_na.

- Class: cmd_question
  Output: Ahora, veamos my_na por pantalla para ver qué tenemos.
  CorrectAnswer: my_na
  AnswerTests: omnitest(correctExpr='my_na')
  Hint: Escribe my_na para ver su contenido.

- Class: text
  Output: Allá donde veamos un TRUE, sabemos que el correspondiente elemento de my_data es NA. Del mismo modo, allá donde veamos un FALSE, sabemos que el correspondiente elemento de my_data es uno de nuestro valores aleatorios extraídos de una distribución normal.

- Class: cmd_question
  Output: En temas anteriores sobre operadores lógicos, introdujimos el operador de igualdad `==` entre dos objetos. Por tanto, podríamos pensar que la expresión my_data == NA devuelve el mismo resultado que is.na(). Probémoslo.
  CorrectAnswer: my_data == NA
  AnswerTests: omnitest(correctExpr='my_data == NA')
  Hint: Prueba my_data == NA para ver qué pasa.

- Class: text
  Output: La razón de obtener un vector de todo NAs es que NA no es realmente un valor, sino un marcador de posición para una cantidad que no está disponible. Por lo tanto, la expresión lógica está incompleta y R no tiene otra alternativa que devolver un vector de la misma longitud que my_data pero conteniendo sólo NAs.

- Class: text
  Output: No te preocupes si esto resulta un poco confuso. La clave está en ser cuidadoso al utilizar expresiones lógicas con datos donde pueda haber NAs, dado que un único NA nos puede echar todo el cálculo por tierra. 

- Class: text
  Output: Ahora que tenemos un vector my_na con el valor TRUE para cada NA y FALSE para cada valor numérico, podemos calcular el total de NAs en nuestros datos. 

- Class: text
  Output: El truco está en reconocer que, en las tripas, R representa TRUE como el número 1 y FALSE como el número 0. Por tanto, si obtenemos la suma de un montón de TRUEs y FALSEs, tendremos el número total de TRUEs.

- Class: cmd_question
  Output: Probemos. Llamemos a la función sum() con my_na para contar el número total de TRUEs en my_na, y por tanto el total de NAs en my_data. No asignes el resultado a una nueva variable.
  CorrectAnswer: sum(my_na)
  AnswerTests: omnitest(correctExpr='sum(my_na)')
  Hint: Usa sum(my_na) para contar el número de NAs en los datos.

- Class: cmd_question
  Output: Divertido, ¿eh? Finalmente, vamos a echar un vistazo a los datos para convencernos de que todo encaja. Muestra my_data en la consola.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Escribe my_data en la console.

- Class: cmd_question
  Output: Ahora que ya hemos visto los NAs, echemos un vistazo a un segundo tipo de valor no disponible -- NaN, que significa 'not a number'. Para generar un NaN, prueba a dividir (usando una barra hacia adelante) 0 por 0.
  CorrectAnswer: 0/0
  AnswerTests: omnitest(correctExpr='0/0')
  Hint: Prueba 0/0.

- Class: cmd_question
  Output: Vamos a hacer otra más, solo por diversión. En R, Inf significa infinito. ¿Qué pasa si le restamos infinito a infinito?
  CorrectAnswer: Inf - Inf
  AnswerTests: omnitest(correctExpr='Inf - Inf')
  Hint: Escribe Inf - Inf. ¿Adivinas el resultado?

- Class: mult_question
  Output: "¿Te gustaría recibir créditos por completar este curso en Coursera.org?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: coursera_on_demand()
  Hint: ""

