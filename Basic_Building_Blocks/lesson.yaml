- Class: meta
  Course: Programando en R
  Lesson: Bloques básicos de construcción
  Author: Nick Carchedi, traducido por Miguel Expósito Martín
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: En este tema, vamos a explorar algunos de los bloques básicos de construcción en el lenguaje de programación R.

- Class: text
  Output: Si en cualquier momento necesitas más información sobre algún tema particular relativo a R, puedes escribir help.start() en la línea de comandos y se abrirá un menú con recursos (bien dentro de RStudio bien en tu navegador por defecto, según tu configuración). De forma alternativa, normalmente una búsqueda sencilla en la web produce las respuestas que andas buscando.

- Class: cmd_question
  Output: En su forma más sencilla, R se puede utilizar como una calculadora interactiva. Escribe 5 + 7 y pulsa Enter.
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: Escribe 5 + 7 y pulsa Enter.

- Class: text
  Output: R simplemente muestra por pantalla el resultado de 12 por defecto. Si embargo, R es un lenguaje de programación y frecuentemente la razón por la que lo utilizamos en vez de una calculadora es con el fin de automatizar algún proceso y evitar repeticiones innecesarias.

- Class: text
  Output: En este caso, podemos querer utilizar nuestro resultado de arriba en un segundo cálculo.
    En lugar de volver a escribir 5 + 7 cada vez que lo necesitemos, podemos sencillamente crear una nueva variable que almacene el resultado.

- Class: text
  Output: 'La manera de asignar un valor a una variable en R es a través del operador de asignación, que es simplemente un símbolo ''menor que'' seguido de un símbolo ''-''. Tiene esta pinta: <-'

- Class: text
  Output: Pensemos en el operador asignación como una flecha. Estamos asignando el valor en el lado derecho de la flecha al nombre de variable en el lado izquierdo de la misma. 

- Class: cmd_question
  Output: Para asignar el resultado de 5 + 7 a una nueva variable llamada x, puedes escribir x <-
    5 + 7. Esto se puede leer como 'x almacena 5 más 7'. Pruébalo ahora.
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: Escribe x <- 5 + 7. Es importante incluir un único espacio en cada lado del operador asignación, pero NO pongas un espacio entre el '<' y el '-' que forman la flecha.

- Class: text
  Output: Observarás que R no ha mostrado por pantalla el resultado de 12 esta vez. Cuando usas el operador asignación, R asume que no quieres ver el resultado por la pantalla inmediatamente, sino que pretendes utilizarlo para otra cosa más adelante.

- Class: cmd_question
  Output: Para ver el contenido de la variable x, simplemente escribe x y pulsa Enter. Pruébalo ahora.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Escribe x y pulsa Enter. Esto mostrará automáticamente el valor de x por pantalla.

- Class: cmd_question
  Output: Ahora, almacena el resultado de x - 3 en una nueva variable llamada y.
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: Escribe y <- x - 3 y pulsa Enter. Tanto si usas x - 3 como x-3 es una preferencia personal, aunque es buen hábito incluir un espacio a cada lado del operador asignación.

- Class: cmd_question
  Output: ¿Cuál es el valor de y? Escribe y para descubrirlo.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Escribe y y pulsa Enter.

- Class: text
  Output: Ahora, vamos a crear una pequeña colección de números llamada vector. Cualquier objeto que contiene datos es una estructura de datos y los vectores numéricos son la esctructura de datos más sencilla en R. De hecho, hasta un único número se considera un vector de longitud uno.

- Class: cmd_question
  Output: La forma más sencilla de crear un vector es con la función c(), que viene de 'concatenar' o 'combinar'. Para crear un vector que contenga los números 1.1, 9 y 3.14, escribe c(1.1, 9, 3.14). Pruébalo ahora y almacena el resultado en una variable llamada z.
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: Si escribes z <- c(1.1, 9, 3.14) se asignará el vector (1.1, 9, 3.14) a una nueva variable llamada z. No es obligatorio incluir espacios simples después de las comas en el vector, pero ayuda a hacer el código menos desordenado y más legible.

- Class: cmd_question
  Output: Si tienes dudas sobre una función en particular en cualquier momento, puedes acceder a los archivos de ayuda incorporada de R a través del comando '?'. Por ejemplo, si quieres más información sobre la función c(), escribe ?c sin los paréntesis que normalmente siguen al nombre de una función. Inténtalo.
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Escribe ?c y pulsa Enter. Esto lanzará el archivo de ayuda para la función c().

- Class: cmd_question
  Output: Escribe z para ver su contenido. Observa que no hay comas separando los valores en la salida.
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: Escribe z y pulsa Enter para visualizar su contenido.

- Class: cmd_question
  Output: Se pueden combinar vectores para hacer un nuevo vector. Crea un vector que contenga z, 555 y z otra vez en ese orden. No asignes este vector a una nueva variable, para que así podamos ver el resultado inmediatamente,
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: Escribe c(z, 555, z). No crees una nueva variable. Sólo queremos ver el resultado.

- Class: cmd_question
  Output: 'Los vectores numéricos se pueden utilizar en expresiones aritméticas. Escribe lo siguiente para ver qué pasa: z * 2 + 100.'
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: Escribe z * 2 + 100, sin asignar el resultado a una variable. El símbolo `*` se utiliza para multiplicar, y comparte la tecla con el número 8 en la mayoría de los teclados.

- Class: text
  Output: Primero, R ha multiplicado cada uno de los tres elementos de z por 2. Luego le ha sumado 100 a cada elemento para obtener el resultado que ves arriba.

- Class: text
  Output: Otros operadores aritméticos comunes son `+`, `-`, `/`, y `^` (donde x^2
    significa 'x al cuadrado'). Para sacar una raíz cuadrada, usa la función sqrt() y para sacar el valor absoluto, la función abs().

- Class: cmd_question
  Output: Saca la raíz cuadrada de z - 1 y asígnasela a una nueva variable llamada my_sqrt. 
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: Asigna el resultado de sqrt(z - 1) a una variable llamada my_sqrt.

- Class: mult_question
  Output: Antes de que veamos el contenido de la variable my_sqrt, ¿qué crees que contendrá)
  CorrectAnswer: un vector de longitud 3
  AnswerChoices: un vector de longitud 3; un único númeo (es decir, un vector de longitud 1);
    un vector de longitud 0 (es decir, un vector vacío)
  AnswerTests: omnitest(correctVal='a vector of length 3')
  Hint: 'Piensa en cómo R ha manejado las otras operaciones ''vectorizadas'': elemento a elemento.'

- Class: cmd_question
  Output: Muestra el contenido de la variable my_sqrt.
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: Escribe my_sqrt y pulsa R para ver su valor.

- Class: text
  Output: Como habrás podido adivinar, R primero ha restado 1 de cada elemento de z y luego ha sacado la raíz cuadrada de cada elemento. Esto nos deja con un vector de la misma longitud que el vector z original.

- Class: cmd_question
  Output: Ahora, crea una nueva variable llamada my_div que almacene el valor de z dividido por my_sqrt.
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: Escribe my_div <- z / my_sqrt. Los espacios a cada lado del símbolo `/` no son obligatorios, pero suelen mejorar la legibilidad haciendo que el código parezca menos desordenado. Al final, se trata de una preferencia personal.

- Class: mult_question
  Output: ¿Cuál de estas afirmaciones crees que es cierta?
  CorrectAnswer: El primer elemento de my_div es igual al primer elemento de z dividido entre el primer elemento de my_sqrt, y así sucesivamente...
  AnswerChoices: El primer elemento de my_div es igual al primer elemento de z dividido entre el primer elemento de my_sqrt, y así sucesivamente...; my_div es un único número (es decir, un vector de longitud 1) 1); my_div no está definido
  AnswerTests: omnitest(correctVal='El primer elemento de my_div es igual al primer elemento de z dividido entre el primer elemento de my_sqrt, y así sucesivamente...')
  Hint: Piensa sobre cómo R ha manejado otras operaciones 'vectorizadas' como `+` y `*`.

- Class: cmd_question
  Output: Sigue adelante y muestra por pantalla el contenido de my_div.
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Escribe my_div y pulsa Enter para ver su contenido.

- Class: text
  Output: Dados dos vectores de la misma longitud, R simplemente lleva a cabo la operación aritmética especificada (`+`, `-`, `*`, etc.) elemento a elemento. Si los vectores son de diferentes longitudes, R 'recicla' el más corto hasta que tiene la misma longitud que el vector más largo.

- Class: text
  Output: Cuando hicimos z * 2 + 100 en nuestro ejemplo anterior, z era un vector de longitud 3, pero técnicamente 2 y 100 son cada uno vectores de longitud 1. 

- Class: text
  Output: 'Entre bastidores, R está ''reciclando'' el 2 para hacer un vector de doses y el 100 para hacer un vector de cienes. En otras palabras, cuando le pedimos a R calcular z* 2 + 100, lo que realmente calcula es esto: z * c(2, 2, 2) + c(100, 100, 100).'

- Class: cmd_question
  Output: Para ver otro ejemplo de cómo funciona este 'reciclado' de vectores, prueba a sumar c(1, 2, 3, 4) y c(0, 10). No te preocupes de salvar el resultado en una nueva variable.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: Introduce c(1, 2, 3, 4) + c(0, 10) en la consola para ver cómo R suma dos vectores de distinta longitud. No asignes el resultado a una variable.

- Class: text
  Output: Si la  división entre la longitud del vector más corto y la del más largo no es exacta, R aún aplicará el método de 'reciclado', pero lanzará un aviso (warning) para hacerte saber que algo sospechoso podría estar pasando.

- Class: cmd_question
  Output: Prueba c(1, 2, 3, 4) + c(0, 10, 100) como ejemplo.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: Introduce c(1, 2, 3, 4) + c(0, 10, 100) para ver cómo R maneja la suma de dos vectores cuando ela longitud del más corto no divide entre la longitud del más largo. No te preocupes de asignar el resultado a una variable.

- Class: text
  Output: Antes de terminar este tema, me gustaría enseñarte un par de trucos para ahorrar tiempo.

- Class: text
  Output: Previamente en el tema, has calculado z * 2 + 100. Supongamos que hemos cometido un error y quisimos sumar 1000 en vez de 100. Podríamos repetir la expresión o...

- Class: cmd_question
  Output: En muchos entornos de programación, la tecla de cursor hacia arriba iterará entre los comandos anteriores. Prueba a pulsar la tecla de cursor hacia arriba en el teclado hasta que obtengas el comando (z * 2 + 100), y entonces cambia el 100 por 1000 y pulsa Enter. Si la tecla de cursor hacia arriba no te funciona, introduce el comando corregido manualmente.
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: Si tu entorno no soporta la característica de la tecla de cursor hacia arriba, entonces escribe el comando correcto para continuar.

- Class: text
  Output: Por último, supongamos que quieres ver el contenido de una variable que has creado previamente, pero no recuerdas si la llamaste my_div o myDiv. Podrías probar las dos y ver cuál de ellas funciona, o....

- Class: cmd_question
  Output: Puedes escribir las primeras dos letras del nombre de variable y entonces pulsar la tecla Tabulador (probablemente, más de una vez). La mayor parte de los entornos de programación te proporcionarán una lista con las variables que has creado y que empiezan por 'my'. Esto se llama 'auto-completado', y puede ser bastante útil cuando tienes muchas variables en tu entorno de trabajo. Pruébalo. Si el auto-completado no te funciona, escribe my_div y pulsa Enter.
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Si tu entorno de programación no soporta auto-completado, escribe my_div y pulsa Enter para continuar. 

- Class: mult_question
  Output: "Te gustaría recibir créditos para completar este curso en Coursera.org?
    Coursera.org?"
  CorrectAnswer: NULL
  AnswerChoices: Sí;No
  AnswerTests: coursera_on_demand()
  Hint: ""
