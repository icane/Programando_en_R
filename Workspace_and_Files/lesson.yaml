- Class: meta
  Course: Programando en R
  Lesson: Espacio de trabajo y archivos
  Author: David Kane, traducido por Miguel Expósito Martín
  Type: Standard
  Organization: Williams College
  Version: 0.1.2

- Class: text
  Output: "En este tema aprenderemos a examinar nuestro espacio de trabajo local en R y empezaremos a exlporar la relación entre el espacio de trabajo y el sistema de ficheros de nuestro ordenador."

- Class: text
  Output: "Dado que según el sistema operativo utilizado las convenciones con respecto a rutas de archivos varían, las salidas de estos comandos pueden variar según la máquina utilizada."

- Class: text
  Output: Sin embargo, es importante observar que R proporciona una API común (conjunto de comandos) para interactuar con archivos de forma que nuestro código funcione en distintos tipos de ordenador.

- Class: text
  Output: ¡Vamos a profundizar en ello para poder tener una idea de cómo van estas funciones especiales!

- Class: cmd_question
  Output: Determina qué directorio está usando tu sesión de R como directorio de trabajo actual usando getwd().
  CorrectAnswer: getwd()
  AnswerTests: omnitest(correctExpr='getwd()')
  Hint: Escribe getwd() para determinar el directorio de trabajo actual.

- Class: cmd_question
  Output: Lista todos los objetos en tu espacio de trabajo local usando ls().
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr='ls()')
  Hint: Escribe ls() para visualizar todos los objetos en tu espacio de trabajo local.

- Class: text
  Output: Algunos comandos de R son los mismos que sus equivalentes en Linux o Mac. Ambos son sistemas operativos basados en Unix. ¡Siempre es buena idea aprender más sobre Unix!

- Class: cmd_question
  Output: Asigna 9 a x usando x <- 9.
  CorrectAnswer: x <- 9
  AnswerTests: omnitest(correctExpr='x <- 9')
  Hint: Escribe x <- 9 para asignar 9 a x.

- Class: cmd_question
  Output: Ahora echemos un vistazo a los objetos en el espacio de trabajo usando ls()..
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr='ls()')
  Hint: Escribe ls() para ver todos los objetos en tu espacio de trabajo.

- Class: cmd_question
  Output: Lista todos los archivos en tu directorio de trabajo usando list.files() o dir().
  CorrectAnswer: list.files()
  AnswerTests: any_of_exprs('list.files()', 'dir()')
  Hint: Escribe list.files() para ver todos los archivos en tu directorio de trabajo.

- Class: cmd_question
  Output: A medida que vamos avanzando, deberías examinar la página de ayuda para cada nueva función. Echa un vistazo a la página de ayuda de list.files con el comando ?list.files.
  CorrectAnswer: ?list.files
  AnswerTests: any_of_exprs('?list.files', '?dir', 'help("list.files")', 'help("dir")')
  Hint: Escribe ?list.files para ver la página de ayuda.

- Class: text
  Output: Una de las partes más útiles de cualquier archivo de ayuda de R es la sección Ver También (See Also). Lee esa sección para la página de list.files. Algunas de esas funciones se podrían usar en partes posteriores de este tema.

- Class: text
  Output: Usar la función args() sobre un nombre de función también es una forma útil de ver qué argumentos acepta dicha función.

- Class: cmd_question
  Output: Usa la función args() para determinar los argumentos de list.files().
  CorrectAnswer: args(list.files)
  AnswerTests: omnitest(correctExpr='args(list.files)')
  Hint: Escribe args(list.files) para ver los arghumentos de list.files.

- Class: cmd_question
  Output: Asigna el valor del directorio de trabajo actual a una variable llamada "old.dir".
  CorrectAnswer: old.dir <- getwd()
  AnswerTests: omnitest(correctExpr='old.dir <- getwd()')
  Hint: Escribe old.dir <- getwd() para asignar el valor del directorio de trabajo actual a una variable llamada "old.dir".

- Class: text
  Output: Utilizaremos old.dir al final de este tema para volver al punto desde el que empezamos. Unas cuántas funciones de consulta como getwd() tienen la útil propiedad de devolver la respuesta a la pregunta como resultado de la función.

- Class: cmd_question
  Output: Usa dir.create() para crear un directorio en el directorio de trabajo actual llamado "testdir".
  CorrectAnswer: dir.create("testdir")
  AnswerTests: omnitest(correctExpr='dir.create("testdir")')
  Hint: Escribe dir.create("testdir") para crear un directorio llamado "testdir" en el directorio de trabajo actual.

- Class: text
  Output: Haremos todo nuestro trabajo en este nuevo directorio y lo borraremos una vez que hayamos terminado.

- Class: cmd_question
  Output: Establece tu directorio de trabajo a "testdir" con el comando setwd().
  CorrectAnswer: setwd("testdir")
  AnswerTests: any_of_exprs('setwd("testdir")', 'setwd("testdir/")')
  Hint: Usa setwd("testdir") para establecer tu directorio de trabajo a "testdir".

- Class: text
  Output: "En general, lo que nos interesa es que nuestro directorio de trabajo tenga que ver con el proyecto específico con el que estamos trabajando. Una opción es organizar nuestro trabajo en paquetes con RStudio."

- Class: cmd_question
  Output: Crea un archivo en tu directorio de trabajo llamado "mytest.R" utilizando la función file.create().
  CorrectAnswer: file.create("mytest.R")
  AnswerTests: omnitest(correctExpr='file.create("mytest.R")')
  Hint: ¡Escribe file.create("mytest.R") y lo tendrás hecho!

- Class: cmd_question
  Output: "Este debería ser el único archivo en nuestro directorio creado recientemente. Vamos a comprobarlo listando todos los archivos en el directorio actual."
  CorrectAnswer: list.files()
  AnswerTests: any_of_exprs('list.files()', 'dir()')
  Hint: list.files() muestra que el directorio sólo contiene el archivo mytest.R.

- Class: cmd_question
  Output: Comprueba que el archivo "mytest.R" existe en el directorio de trabajo utilizando la función file.exists().
  CorrectAnswer: file.exists("mytest.R")
  AnswerTests: omnitest(correctExpr='file.exists("mytest.R")')
  Hint: Usa file.exists("mytest.R") para comprobar que el archivo existe.

- Class: text
  Output: Este tipo de funciones son excesivas para un uso interactivo pero, si estás ejecutando un programa que itera sobre una serie de archivos y realiza más de un procesado sobre cada uno de ellos, te interesará comprobar que cada uno existe antes de empezar a procesarlo.

- Class: cmd_question
  Output: Accede a la información sobre el archivo "mytest.R" usando file.info().
  CorrectAnswer: file.info("mytest.R")
  AnswerTests: omnitest(correctExpr='file.info("mytest.R")')
  Hint: ¡file.info("mytest.R") es lo que necesitas!

- Class: text
  Output: Es posible utilizar el operador $ --- ej., file.info("mytest.R")$mode --- 
    para recuperar un ítem específico.

- Class: cmd_question
  Output: Cambia el nombre del archivo "mytest.R" a "mytest2.R" usando file.rename().
  CorrectAnswer: file.rename("mytest.R", "mytest2.R")
  AnswerTests: any_of_exprs('file.rename("mytest.R", "mytest2.R")', 'file.rename(from = "mytest.R", to = "mytest2.R")')
  Hint: file.rename("mytest.R", "mytest2.R") es tu respuesta. Si buscas en Google las palabras clave de la pregunta y la letra R, obtendrás también buenas pistas.
 
- Class: text
  Output: "Tu sistema operativo te proporcionará herramientas más sencillas para este tipo de tareas, pero disponer de la opción de manipular archivos programáticamente es muy útil. Podrías intentar ahora borrar el archivo mytest.R utilizando l afunción file.remove('mytest.R'), pero no funcionará dado que el archivo ya ha sido renombrado."

- Class: cmd_question
  Output: Haz una copia de "mytest2.R" llamada "mytest3.R" usando file.copy().
  CorrectAnswer: file.copy("mytest2.R", "mytest3.R")
  AnswerTests: any_of_exprs('file.copy("mytest2.R", "mytest3.R")', 'file.copy(from = "mytest2.R", to = "mytest3.R")')
  Hint: file.copy("mytest2.R", "mytest3.R") funciona.

- Class: text
  Output: Ahora tenemos dos archivos en el directorio actual. Esto no parece muy interesante. Pero, ¿y si estuviéramos trabajando con docenas o miles de archivos individuales? En ese caso, ser capaz de actuar sobre dichos archivos programáticamente sería absolutamente necesario. No olvides que en cualquier momento puedes dejar el tema temporalmente escribiendo play() y después volver escribiendo nxt().

- Class: cmd_question
  Output: Proporciona una ruta relativa al archivo "mytest3.R" usando file.path().
  CorrectAnswer: file.path("mytest3.R")
  AnswerTests: omnitest(correctExpr='file.path("mytest3.R")')
  Hint: Escribe file.path("mytest3.R") para conseguirlo.

- Class: cmd_question
  Output: "Podemos usar file.path para construir rutas de archivos y directorios independientes del sistema operativo en el que se ejecuta el código R. Pasa 'folder1' y 'folder2' como argumentos a file.path para conseguir una ruta independiente de la plataforma."
  CorrectAnswer: file.path("folder1", "folder2")
  AnswerTests: omnitest(correctExpr='file.path("folder1", "folder2")')
  Hint: Escribe file.path("folder1", "folder2").

- Class: cmd_question
  Output: "Echa un vistazo a la ayuda para dir.create escribiendo ?dir.create. Observa el argumento 'recursive'. Para crear directorios anidados, este argumento debe tener valor TRUE."
  CorrectAnswer: ?dir.create
  AnswerTests: omnitest(correctExpr='?dir.create')
  Hint: ?dir.create te mostrará la ayuda.

- Class: cmd_question
  Output: Crea un nuevo directorio en el directorio de trabajo actual llamado "testdir2" y un subdirectorio dentro de este llamado "testdir3", todo en un mismo comando, usando dir.create() and file.path().
  CorrectAnswer: dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
  AnswerTests: omnitest(correctExpr='dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)')
  Hint: "dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE) servirá. Si olvidas el argumento recursive, puede parecer que el comando ha funcionado, pero no creará el directorio anidado."

- Class: text
  Output:  "Para borrar un directorio tenemos que usar el argumento recursive = TRUE argument
    con la función unlink(). Si no usamos recursive = TRUE, R pensará que no somos conscientes de que estamos borrando un directorio y todo su contenido; es decir, creerá que no sabemos que hay algo en el directorio que estamos intentando borrar. Es una forma de prevenirnos de cometer un error."

- Class: text
  Output: "Nos gustaría hacer ahora un ejercicio con unlink() para borrar algunos de los archivos que hemos creado durante este tema; sin embargo, si nos equivocásemos de directorio, podríamos borrar archivos muy valiosos. Deberías borrar los archivos creados en este tema por ti mismo."

- Class: text
  Output: ¿Por qué este comando se llama "unlink" y no algo más apropiado como "dir.delete" or "dir.remove"? Fundamentalmente, por motivos históricos. unlink es el comando de Unix tradicional para elminar directorios.

- Class: cmd_question
  Output: Volvamos a nuestro directorio de trabajo original utilizando setwd(). Recordemos que anteriormente creamos una variable old.dir con la ruta completa para el directorio de trabajo original.
  CorrectAnswer: setwd(old.dir)
  AnswerTests: omnitest(correctExpr='setwd(old.dir)')
  Hint: Usa setwd(old.dir).

- Class: text
  Output: "A menudo es útil guardar la configuración que teníamos al empezar un análisis y posteriormente volver a la misma al final. Este truco se suele utilizar dentro de funciones; se guarda la configuración inicial de par(), se trabaja y se restablecen los valores originales al final. No es exatamente lo mismo que hemos hecho aquí, pero parece lo suficientemente parecido como para mencionarlo."

- Class: cmd_question
  Output: "Borra el directorio 'testdir' que acabas de dejar (y todo su contenido)."
  CorrectAnswer: unlink("testdir", recursive = TRUE)
  AnswerTests: omnitest(correctExpr='unlink("testdir", recursive = TRUE)')
  Hint: Usa unlink("testdir", recursive = TRUE).

- Class: text
  Output: "En este tema, hemos aprendido a examinar el espacio de trabajo de R y a trabajar con el sistema de ficheros de nuestra máquina desde R. Gracias por jugar!"

- Class: mult_question
  Output: "¿Te gustaría recibir créditos en Coursera.org por completar este curso?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: coursera_on_demand()
  Hint: ""

