- Class: meta
  Course: Programando en R
  Lesson: Secuencias de números
  Author: Nick Carchedi, traducido por Miguel Expósito Martín
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: En este tema, aprenderemos a crear secuencias de números en R.

- Class: cmd_question
  Output: El modo más sencillo de crear una secuencia de números en R es utilizando el operador `:`. Escribe 1:20 para ver cómo funciona.
  CorrectAnswer: '1:20'
  AnswerTests: omnitest(correctExpr='1:20')
  Hint: Escribe 1:20 sin espacios. Asegúrate de usar dos puntos y no punto y coma.

- Class: cmd_question
  Output: Esto nos ha devuelto todos los enteros entre 1 y 20 inclusive. También podríamos generar una secuencia de números reales. Por ejemplo, prueba pi:10.
  CorrectAnswer: pi:10
  AnswerTests: omnitest(correctExpr='pi:10')
  Hint: Introduce pi:10 y observa los resultados. pi es una constante predefinida en R que toma el valor  3.1415....

- Class: text
  Output: El resultado es un vector de números reales empezando por pi (3.142...) y con incrementos de 1. El límite superior de 10 nunca se alcanza, puesto que el siguiente número en la secuencia sería mayor que 10.

- Class: cmd_question
  Output: 'Qué ocurre si hacemos 15:1? Vamos a probarlo para descubrirlo.'
  CorrectAnswer: '15:1'
  AnswerTests: omnitest(correctExpr='15:1')
  Hint: Escribe 15:1 y pulsa Enter.

- Class: text
  Output: Ha contado hacia atrás en incrementos de uno. Puede que sea poco probable que necesitemos este comportamiento, pero está bien saber cómo se haría.

- Class: text
  Output: "Recuerda que si tienes dudas sobre una función de R en particular, puedes acceder a su documentación con un interrogante seguido del nombre de la función (?funcion). No obstante, en el caso de un operador como los dos puntos usados arriba, debemos encerrar el símbolo entre los caracteres ` ` (generalmente, al lado de la tecla P en un teclado en castellano)."

- Class: text
  Output: "A menudo necesitamos más control sobre la secuencia que estamos creando que el que ofrece el operador `:`. Para este propósito tenemos la función seq()."

- Class: cmd_question
  Output: "El uso más básico de seq() hace exactamente lo mismo que el operador `:`. Probemos seq(1, 20) para verlo."
  CorrectAnswer: seq(1, 20)
  AnswerTests: omnitest(correctExpr='seq(1, 20)')
  Hint: Escribe seq(1, 20) y pulsa Enter. El espacio después de la coma no es obligatorio, pero se recomienda ponerlo ya que mejora la legibilidad del código.

- Class: cmd_question
  Output: "El comando anterio devuelve el mismo resultado que 1:20. Sin embargo, pongamos que queremos un vector de números entre 0 y 10 e incrementos de 0.5.  seq(0, 10, by=0.5) hace exactamente esto. Probémoslo."
  CorrectAnswer: seq(0, 10, by=0.5)
  AnswerTests: omnitest(correctExpr='seq(0, 10, by=0.5)')
  Hint: Todavía estamos usando la función seq(), pero esta vez con un argumento extra que le dice a R que queremos un paso de 0.5. PRueba seq(0, 10, by=0.5).

- Class: cmd_question
  Output: O quizá no nos importa el paso y tan sólo queremos una secuencia de 30 números entre 5 y 10. seq(5, 10, length=30) hace esto. Probémoslo almacenando el resultado en una nueva variable llamada my_seq.
  CorrectAnswer: my_seq <- seq(5, 10, length=30)
  AnswerTests: omnitest(correctExpr='my_seq <- seq(5, 10, length=30)')
  Hint: 'Estás usando la misma funcion, pero con otros argumentos para conseguir distintos resultados. Asegúrate de almacenar el resultado en una variable llamada my_seq; my_seq <- seq(5, 10, length=30).'

- Class: cmd_question
  Output: Para asegurarnos de que my_seq tiene longitud 30, podemos usar la función length(). Probémoslo.
  CorrectAnswer: length(my_seq)
  AnswerTests: omnitest(correctExpr='length(my_seq)')
  Hint: Usa length(my_seq) para ver la longitud de la variable my_seq.

- Class: text
  Output: Vamos a fingir que no sabemos la longitud de my_seq pero queremos generar una secuencia de enteros de 1 a N, donde N representa la longitud del vector my_seq. En otras palabras, queremos un vector (1, 2, 3 ...) de la misma longitud que my_seq.

- Class: cmd_question
  Output: 'Hay varias formas de hacer esto. Una posibilidad es combinar el operador `:` y la función length(). 1:length(my_seq). Probémoslo.'
  CorrectAnswer: 1:length(my_seq)
  AnswerTests: omnitest(correctExpr='1:length(my_seq)')
  Hint: Prueba 1:length(my_seq), sin asignar el resultado a una nueva variable.

- Class: cmd_question
  Output: Otra opción sería usar seq(along.with = my_seq). Probémoslo.
  CorrectAnswer: seq(along.with = my_seq)
  AnswerTests: omnitest(correctExpr='seq(along.with = my_seq)')
  Hint: Escribe seq(along.with = my_seq). Estamos usando la misma función seq() con un argumento diferente llamado `along.with`. Esto le dice a R que queremos una secuencia junto con la secuencia my_seq. Recuerda que puedes escribir ?seq si tienes dudas sobre la función seq().

- Class: cmd_question
  Output: Por otra parte, como es el caso con otras tareas comunes, R dispone de una función separada para este propósito llamada seq_along(). Escribe seq_along(my_seq) para verla en acción.
  CorrectAnswer: seq_along(my_seq)
  AnswerTests: omnitest(correctExpr='seq_along(my_seq)')
  Hint: La función seq_along() es una variaciónde la función seq(). Prueba seq_along(my_seq) para obtener el mismo resultado de otra forma más.

- Class: text
  Output: Suele haber siempre diferentes enfoques par resolver distintos problemas, y esto es particularmente cierto en R. Generalmente, los enfoques sencillos que implican escribir menos son los mejores. También es importante que nuestro código sea legible, para que nosotros mismos y otros podamos hacernos una idea de lo que hemos querido decir sin mucho esfuerzo.

- Class: text
  Output: Si R tiene una función por defecto para una tarea en particular, es probable que esa función esté optimizada para ese propósito y represente nuestra mejor opción. A medida que vayamos adquiriendo más experiencia en R, diseñaremos nuestras propias funciones para realizar tareas cuando no haya mejores alternativas. Exploraremos la escritura de funciones en otros temas.

- Class: text
  Output: Otra función asociada a la creación de secuencias de números es rep(), la cual significa 'replicar'. Veamos alguno de sus usos.

- Class: cmd_question
  Output: Si estamos interesados en crear un vector que contiene 40 ceros, podemos utilizar rep(0, times = 40). Probémoslo.
  CorrectAnswer: rep(0, times = 40)
  AnswerTests: omnitest(correctExpr='rep(0, times = 40)')
  Hint: Escribe rep(0, times = 40) para hacer un vector que contenta 40 ceros.

- Class: cmd_question
  Output: Si en su lugar queremos que nuestro vector contenga diez repeticiones del vector (0, 1, 2), podemos hacer rep(c(0, 1, 2), times = 10). Adelante.
  CorrectAnswer: rep(c(0, 1, 2), times = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), times = 10)')
  Hint: Prueba rep(c(0, 1, 2), times = 10) para otra variante del mismo tema. Asegúrate de usar la función c() para decirle a R que los números 0, 1 y 2 forman un vector.

- Class: cmd_question
  Output: Finalmente, digamos que más que repetir el vector (0, 1, 2) una y otra vez, queremos que nuestro vector contenga 10 ceros, 10 unos y 10 doses. Podemos hacer esto con el argumento `each`. Prueba rep(c(0, 1, 2), each = 10).
  CorrectAnswer: rep(c(0, 1, 2), each = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), each = 10)')
  Hint: Prueba rep(c(0, 1, 2), each = 10) para ver cómo el argumento `each` de la función rep() altera su comportamiento significativamente.

- Class: mult_question
  Output: "¿Te gustaría recibir créditos por completar este curso en Coursera.org?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: coursera_on_demand()
  Hint: ""
