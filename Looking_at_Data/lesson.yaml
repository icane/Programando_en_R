- Class: meta
  Course: Programando en R
  Lesson: Inspeccionando los datos
  Author: Nick Carchedi, traducido por Miguel Expósito Martín
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.11

- Class: text
  Output: Al trabajar con un nuevo dataset, lo primero que deberías hacer es inspeccionarlo. ¿Qué formato tienen los datos? ¿Cuáles son sus dimensiones? ¿Cuáles son los nombres de variables?¿Cómo se almacenan? ¿Hay valores que falten?¿Hay algún problema con los datos?

- Class: text
  Output: Este tema te enseñará a contestar estas preguntas y a utilizar las funciones por defecto de R. Utilizaremos un dataset producido por la base de datos PLANTS del Departamento de Agricultura de Estados Unidos (http://plants.usda.gov/adv_search.html).

- Class: cmd_question
  Output: Hemos almacenado los datos por ti en una variable llamada plants. Escribe ls() para listar las variables en tu espacio de trabajo, entre las que debería estar plants.
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr='ls()')
  Hint: Usa ls() para listar las variables en tu espacio de trabajo.

- Class: cmd_question
  Output: Empecemos comprobando la clase de la variable plants con el comando class(plants). Esto nos dará una pista de la estructura general de los datos.
  CorrectAnswer: class(plants)
  AnswerTests: omnitest(correctExpr='class(plants)')
  Hint: Usa class(plants) para comprobar la clase de la variable plants.

- Class: text
  Output: Es muy común almacenar datos en un data frame. Es la clase por defecto en R para leer datos usando funciones como read.csv() y read.table(), que estudiaremos en otro tema.

- Class: cmd_question
  Output: Dado que el dataset se almacena en un data frame, sabemos que es rectangular. En otras palabras, tiene dos dimensiones (filas y columnas) y encaja perfectamente en una tabla u hoja de cálculo. Utiliza dim(plants) para ver exactamente con cuántas filas y columnas estamos tratando.
  CorrectAnswer: dim(plants)
  AnswerTests: omnitest(correctExpr='dim(plants)')
  Hint: Usa dim(plants) para ver las dimensiones exactas del dataset plants.

- Class: text
  Output: El primer número que ves (5166) es el número de filas (observaciones) y el segundo número (10) es el número de columnas (variables). 

- Class: cmd_question
  Output: También puedes usar nrow(plants) para ver únicamente el número de filas. Pruébalo.
  CorrectAnswer: nrow(plants)
  AnswerTests: omnitest(correctExpr='nrow(plants)')
  Hint: Usa nrow(plants) para ver únicamente el número de filas.

- Class: cmd_question
  Output: ... Y ncol(plants) para ver únicamente el número de columnas.
  CorrectAnswer: ncol(plants)
  AnswerTests: omnitest(correctExpr='ncol(plants)')
  Hint: Usa ncol(plants) para ver únicamente el número de columnas.

- Class: cmd_question
  Output: Si te pica la curiosidad sobre cuánto espacio ocupa el dataset en memoria, puedes utilizar object.size(plants).
  CorrectAnswer: object.size(plants)
  AnswerTests: omnitest(correctExpr='object.size(plants)')
  Hint: object.size(plants) te dirá la memoria ocupada por el dataframe plants.

- Class: cmd_question
  Output: Ahora que ya tenemos una idea de la forma y tamaño del dataset, hagámonos una idea de lo que contiene. names(plants) devolverá un vector de caracteres con los nombres de columnas (variables). Pruébalo.
  CorrectAnswer: names(plants)
  AnswerTests: omnitest(correctExpr='names(plants)')
  Hint: names(plants) devolverá un vector de caracteres con los nombres de columna (variables).

- Class: text
  Output: Hemos utilizado nombres de variables bastante descriptivos en este dataset, pero ese no será siempre el caso. Un siguiente paso lógico es examinar esos datos. Sin embargo, nuestro dataset contiene alrededor de 5000 observaciones (filas), con lo que no es práctico visualizar todos los datos de una sóla vez.
  
- Class: cmd_question
  Output: La función head() permite hacer una previsualización de las primeras filas del dataset. Probémoslo con un único argumento.
  CorrectAnswer: head(plants)
  AnswerTests: omnitest(correctExpr='head(plants)')
  Hint: head(plants) nos mostrará el comienzo del dataset.

- Class: text
  Output: Tomemos nuestro tiempo en observar y comprender la salida anterior. Cada fila se etiqueta con el número de observación y cada columna con su nombre de variable. Probablemente nuestra pantalla no sea lo suficientemente ancha para ver las 10 columnas simultáneamente; en ese caso, R muestra todas las columnas que puede en cada línea antes de continuar con la siguiente.

- Class: cmd_question
  Output: Por defecto, head() nos muestra las primeras seis filas de los datos. Se puede alterar este comportamiento pasando un segundo argumento con el número de filas que nos gustaría ver. Vamos a utilizar head() para previsualizar las 10 primeras filas de plants.
  CorrectAnswer: head(plants, 10)
  AnswerTests: omnitest(correctExpr='head(plants, 10)')
  Hint: head(plants, 10) nos mostrará las 10 primeras filas del dataset. 

- Class: cmd_question
  Output: Lo mismo ocurre con tail() para visualizar el final del dataset. Usémoslo para visualizar las últimas 15 filas.
  CorrectAnswer: tail(plants, 15)
  AnswerTests: omnitest(correctExpr='tail(plants, 15)')
  Hint: tail(plants, 15) nos mostrará las últimas 15 filas del dataset.

- Class: cmd_question
  Output: Después de previsualizar el principio y el final de los datos, probablemente habrás advertido que hay un montón de NAs o valores no disponibles. Podemos usar summary(plants) para tener una idea mejor de cómo está distribuida cada variable y cuántos datos faltan.
  CorrectAnswer: summary(plants)
  AnswerTests: omnitest(correctExpr='summary(plants)')
  Hint: Prueba summary(plants) para ver cómo está distribuida cada variable y con cuántos valores no disponibles estamos tratando.

- Class: text
  Output: summary() proporciona una salida diferente para cada variable, dependiendo de su clase. Para datos numéricos como Precip_Min, summary() muestra el mínimo, el primer cuartil, la mediana, la media, el tercer cuartil y el máximo. Estos valores nos ayudan a comprender cómo están distribuidos los datos.

- Class: text
  Output: Para variables categóricas o factores, summary() muestra el número de veces que cada valor o nivel aparece en los datos. Por ejemplo, cada valor de Scientific_Name aparece sólo una vez, dado que es único para una planta esecífica. En cambio, summary() para Duration (también una variable de tipo factor) nos indica que el dataset contiene 3031 plantas Perennes, 682 anuales, etc.

- Class: cmd_question
  Output: Puedes ver que R ha truncado el sumario para Active_Growth_Period incluyendo una categoría general llamada 'Other'. Dado que se trata de una variable de tipo categórica o factor, podemos ver cuántas veces ocurre cada valor en los datos con la función table(plants$Active_Growth_Period).
  CorrectAnswer: table(plants$Active_Growth_Period)
  AnswerTests: omnitest(correctExpr='table(plants$Active_Growth_Period)')
  Hint: table(plants$Active_Growth_Period) mostrará conteos para cada nivel de una variable de tipo factor.

- Class: text
  Output: Cada una de las funciones que hemos introducido hasta ahora tiene su hueco para ayudarnos a comprender la estructura de nuestros datos. Si embargo, hemos dejado lo mejor para el final...

- Class: cmd_question
  Output: Quizá la función más útil y concisa para comprender la e*str*uctura de nuestros datos es str(). Vamos a probarla.
  CorrectAnswer: str(plants)
  AnswerTests: omnitest(correctExpr='str(plants)')
  Hint: Usa str(plants) para echar un vistazo a la estructura de tus datos.

- Class: text
  Output: Lo bonito de str() es que combina muchas de las características de las otras funciones que ya hemos visto, todo ello en un formato conciso y legible. De entrada, nos indica que la clase de plants es 'data.frame' y que tiene 5166 observaciones y 10 variables. Después nos da el nombre y clase de cada variable, así como una previsualización de sus contenidos.

- Class: text
  Output: str() es, de hecho, una función muy general que se puede utilizar con la mayor parte de los objetos de R. Cada vez que queramos comprender la estructura de cualquier cosa (dataset, función, etc.), str() es un buen punto de partida.

- Class: text
  Output: En este tema hemos aprendido cómo hacernos una idea de la estructura y contenidos de un nuevo dataset utilizando una colección de funciones sencillas y útiles. Tomarnos nuestro tiempo haciendo esto nos puede ahorrar mucho tiempo y frustración en fases posteriores de nuestros análisis.

- Class: mult_question
  Output: "Te gustaría recibir créditos por completar este curso en Coursera.org?"
  CorrectAnswer: NULL
  AnswerChoices: Sí;No
  AnswerTests: coursera_on_demand()
  Hint: ""
